#!/usr/bin/env python
import os
import re
import sys
import math
import json
import itertools
import subprocess
from typing import Iterable, Mapping, Any, List

import tabulate


gpu_stat = 'gpustat'


def fetch(server: str) -> 'subprocess.Popen[str]':
    return subprocess.Popen(
        ['ssh'] + server.split(' ') + [gpu_stat, '--json'],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)


def ip(server: str) -> str:
    cmd = ['ssh', '-G'] + server.split(' ')
    ssh = subprocess.Popen(cmd, stdout=subprocess.PIPE)
    awk = subprocess.Popen(
        ['awk', '/^hostname / { print $2 }'],
        stdin=ssh.stdout, stdout=subprocess.PIPE)
    output, _ = awk.communicate()
    return output.decode().strip()


ResultDict = Mapping[str, Any]


def fetch_all(servers: Iterable[str]) -> Mapping[str, ResultDict]:
    procs: Mapping[str, 'subprocess.Popen[str]'] = {}
    results: Mapping[str, ResultDict] = {}
    for s in servers:
        procs[s] = fetch(s)
    print('Finished: ', end='')
    for s, p in procs.items():
        try:
            print(f'{repr(s) if " " in s else s} ', end='')
            sys.stdout.flush()
            stdout, stderr = p.communicate(timeout=10)
        except subprocess.TimeoutExpired as e:
            p.kill()
            results[s] = {'error': str(e)}
            continue
        if p.returncode:
            results[s] = {
                'error': p.returncode,
                'stdout': stdout,
                'stderr': stderr,
            }
        else:
            results[s] = json.loads(stdout)
    print('')
    return results


def gpu_name(name: str) -> str:
    if 'V100' in name:
        return 'v100'
    if 'A100' in name:
        return 'a100'
    if 'A40' in name:
        return 'a40'
    if '3080 Ti' in name:
        return '3080ti'
    if '3090' in name:
        return '3090'
    return '?'


def unit(value: float) -> str:
    if value < 1024:
        return '0MB'
    units = 'MGTP'
    base = math.floor(math.log(value, 1024))
    value /= math.pow(1024, base)
    return f'{value:5.2f}{units[base]}B'


def format_processes(procs: Iterable[ResultDict]):
    users = set(p['username'] for p in procs)
    text: List[str] = []
    for u in users:
        m = sum(p['gpu_memory_usage'] for p in procs if p['username'] == u)
        text.append(f'{u}({unit(m).strip()})')
    return ', '.join(text)


def format_table(results: Mapping[str, ResultDict]) -> List[List[str]]:
    lines: List[List[str]] = []
    for server, server_result in results.items():
        ip_addr = ip(server)
        if 'error' in server_result:
            # error = stderr.decode().splitlines()[-1]
            print(f'{server} ({ip_addr}): error code {server_result["error"]}.')
            if stdout := server_result.get('stdout'):
                print(stdout)
            if stderr := server_result.get('stderr'):
                print(stderr)
            # lines.append([server, 'error'])
            continue
        for gpu in server_result['gpus']:
            line: List[str] = [
                f'{server}.{gpu["index"]}',
                ip_addr,
                gpu_name(gpu["name"]),
                f'{gpu["utilization.gpu"]}%',
                f'{unit(gpu["memory.used"])}',
                f'{unit(gpu["memory.total"])}',
                format_processes(gpu["processes"])]
            lines.append(line)
    return lines


def _regex_servers(regexes: Iterable[str]) -> Iterable[str]:
    ssh_config = os.path.join(os.environ['HOME'], '.ssh/config')
    with open(ssh_config, 'r', encoding='utf-8') as f:
        hostnames = [s.split()[1] for s in f if s.startswith('Host ')]
    servers = []
    for r in regexes:
        regex_servers = []
        for h in hostnames:
            if re.match(r, h):
                regex_servers.append(h)
        is_regex = any(c in r for c in '*?[](){}|\\')
        if not regex_servers:
            if is_regex:
                print(f'No servers match {r!r}.')
            else:
                regex_servers.append(r)
        servers += regex_servers
    return servers


def _range_servers(ranges: Iterable[str]) -> Iterable[str]:
    servers = []
    scope_regex = re.compile(r'\[(\d+)\-(\d+)\]')
    for r in ranges:
        scopes = scope_regex.findall(r)
        if not scopes:
            servers.append(r)
            continue
        values = itertools.product(
            *[range(int(s), int(e) + 1) for s, e in scopes])
        for v in values:
            replacer = lambda m, i=iter(v): str(next(i))
            h = scope_regex.sub(replacer, r)
            servers.append(h)
    return servers


def main():
    patterns = sys.argv[1:]
    if not patterns:
        print('No servers specified.')
        sys.exit(-1)
    patterns = _range_servers(patterns)
    patterns = _regex_servers(patterns)
    results = fetch_all(patterns)
    table = format_table(results)
    if not table:
        return
    headers = ('Server', 'IP', 'GPU', 'Usage', 'Used', 'Total', 'Users')
    colalign = ('right', 'left', 'left') + ('right', ) * 3 + ('left', )
    return tabulate.tabulate(table, headers=headers, colalign=colalign)


if __name__ == '__main__':
    print(main())
