#!/bin/bash

# Check if the required arguments are provided
user="$1"
server="$2"
if [ -z "$user" ] || [ -z "$server" ]; then
    echo "Usage: $0 <username> <server>"
    exit 1
fi

# Check if the SSH key pair exists locally, generate if not
mkdir -p "$HOME/.ssh/keys"
key_path="$HOME/.ssh/keys/$user.id_ed25519"
if [ ! -f "$key_path.pub" ]; then
    ssh-keygen -t ed25519 -f $key_path -N "" -C "$user@$server"
    echo "Key pair created for $user."
else
    echo "Key pair already exists for $user."
fi

# Read the public keys
admin_key=$(cat $HOME/.ssh/id_rsa.pub)
user_key=$(cat $key_path.pub)

# Create the new user on the remote server
user_exists=$(ssh "$server" "id -u $user" 2>/dev/null)
if [ ! -z "$user_exists" ]; then
    echo "Error: User '$user' already exists on '$server'." >&2
    echo -n "Run anyway? (y/n) "
    read -r confirm
    if [ "$confirm" != "y" ]; then
        exit 1
    fi
fi
# Add user, generate a random password
# and set the password for the new user
password=$(openssl rand -base64 21)
read -r -d '' cmd <<EOF
adduser --disabled-password --gecos '' $user
echo '$user:$password' | chpasswd
mkdir -p /home/$user/.ssh
echo "$admin_key" >> /home/$user/.ssh/authorized_keys
echo "$user_key" >> /home/$user/.ssh/authorized_keys
chown -R $user:$user /home/$user/.ssh
chmod 700 /home/$user/.ssh
chmod 600 /home/$user/.ssh/authorized_keys
EOF
ssh "$server" "$cmd"
echo "User '$user' created on '$server' with password $password."

# Open Finder with the key files selected
open -R $key_path $key_path.pub
