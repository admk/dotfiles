#!/usr/bin/env xonsh
import os
import argparse
from enum import Enum


KSH_NAME = '.ksh'


class HermeticMode(Enum):
    HERMETIC = 0
    SEMI_HERMETIC = 1
    NON_HERMETIC = 2


_USAGE = (f"""Usage:
    ksh [-h | --help]
        [+v | +verbose]
        [(+h | +hermetic) | (+s | +semi-hermetic) | (+n | +non-hermetic)]
        [ssh args] [destination]")

Options:
    +v, +verbose: verbose mode.
    +h, +hermetic: use hermetic mode (default).
    +s, +semi-hermetic: use semi-hermetic mode.
    +n, +non-hermetic: use non-hermetic mode.""")


def _parse_ksh_args(args):
    ns = argparse.Namespace()
    ns.verbose = '+v' in args or '+verbose' in args
    mode = HermeticMode.HERMETIC
    if '+h' in args or '+hermetic' in args:
        mode = HermeticMode.HERMETIC
    elif '+s' in args or '+semi-hermetic' in args:
        mode = HermeticMode.SEMI_HERMETIC
    elif '+n' in args or '+non-hermetic' in args:
        mode = HermeticMode.NON_HERMETIC
    ns.hermetic_mode = mode
    return ns


def _parse_ssh_args(args):
    parser = argparse.ArgumentParser()
    for option in '46AaCfGgKkMNnqsTtVvXxYy':
        parser.add_argument(f'-{option}', action='store_true')
    for option in 'BbcDEeFIiJLlmOoPpQRSWw':
        parser.add_argument(f'-{option}', dest=option)
    parser.add_argument('destination', nargs='?', default='localhost')
    return parser.parse_args(args[1:])


def _unparse_ssh_args(parsed_args, dest=True):
    command_line = ['ssh']
    for option in '46AaCfGgKkMNnqsTtVvXxYy':
        if getattr(parsed_args, option):
            command_line.append(f'-{option}')
    for option in 'BbcDEeFIiJLlmOoPpQRSWw':
        value = getattr(parsed_args, option)
        if value is not None:
            command_line.append(f'-{option}')
            command_line.append(str(value))
    if dest:
        command_line.append(parsed_args.destination)
    return command_line


ksh_args, ssh_args = [], []
if '-h' in $ARGS or '--help' in $ARGS:
    print(_USAGE)
    exit(0)
for a in $ARGS:
    if a.startswith('+'):
        ksh_args.append(a)
    else:
        ssh_args.append(a)
ksh_args = _parse_ksh_args(ksh_args)
ssh_args = _parse_ssh_args(ssh_args)

if ' ' in KSH_NAME:
    echo 'KSH name cannot contain spaces.'
    exit(1)
gitdir = pf'~/{KSH_NAME}'
if pf'{gitdir}'.exists():
    cd @(gitdir)
    git pull --force origin master 2>&1 > /dev/null
    cd -
else:
    git clone ~ @(gitdir) 2>&1 > /dev/null

ssh_cmd = _unparse_ssh_args(ssh_args, dest=False)
rsync \
    --archive --compress --update --human-readable --partial \
    --progress --rsh @((' '.join(ssh_cmd))) \
    --cvs-exclude --exclude .miniconda3/ --exclude .cache/ \
    @(gitdir)/ @(ssh_args.destination):@(KSH_NAME)
prefix = [
    f'KSH_MODE={ksh_args.hermetic_mode.name.lower().replace("_", "-")}',
    f'KSH_VERBOSE={int(ksh_args.verbose)}'
]
bootstrap = f"{' '.join(prefix)} bash -c {KSH_NAME}/.config/xonsh/ksh_bootstrap.sh"
@(ssh_cmd) -o RequestTTY=yes @(ssh_args.destination) @([bootstrap])
