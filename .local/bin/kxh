#!/usr/bin/env kxh_python
import os
import re
import sys
import glob
import shlex
import shutil
import argparse
import tempfile
import subprocess

import tomlkit
from cryptography.fernet import Fernet


_quote_pos = re.compile('(?=[^-0-9a-zA-Z_./\n])')

def quote(arg):
    r"""
    >>> quote('\t')
    '\\\t'
    >>> quote('foo bar')
    'foo\\ bar'
    """
    if arg:
        return _quote_pos.sub('\\\\', arg).replace('\n',"'\n'")
    return "''"


def highlight(src, lang):
    import pygments
    from pygments.formatters import TerminalFormatter
    from pygments.lexers.configs import TOMLLexer
    if lang == 'toml':
        lexer = TOMLLexer()
    else:
        raise ValueError(f'Unknown language: {lang!r}')
    formatter = TerminalFormatter()
    return pygments.highlight(src, lexer, formatter).strip('\n')


def add_border(title, hl_title, src, hl_src, indent=0):
    hl_title = hl_title or title
    hl_src = hl_src or src
    width = max(len(l) for l in src.split('\n'))
    if title:
        width = max(width, len(title))
    lines = ['╭─' + '─' * width + '─╮']
    if title:
        lines.append('│ ' + hl_title + ' ' * (width - len(title)) + ' │')
        lines.append('├─' + '─' * width + '─┤')
    for hl_line, line in zip(hl_src.split('\n'), src.split('\n')):
        lines.append('│ ' + hl_line + ' ' * (width - len(line)) + ' │')
    lines.append('╰─' + '─' * width + '─╯')
    lines = [f'{" " * indent}{l}' for l in lines]
    return '\n'.join(lines)


class colors:
    HEADER = '\033[95m'
    DEBUG = '\033[0;37m'
    VERBOSE = '\033[94m'
    INFO = '\033[92m'
    WARNING = '\033[93m'
    ERROR = '\033[91m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    OKCYAN = '\033[96m'
    ENDC = '\033[0m'


def print_message(flag, message, *args, use_color=True, **kwargs):
    color = getattr(colors, flag.upper()) if use_color else ''
    if flag == 'raw':
        print(message, *args, **kwargs)
        return
    if flag == 'error':
        if use_color:
            color = f'{colors.BOLD}{color}'
        kwargs.setdefault('file', sys.stderr)
    print(f'{color}kxh {flag} ==> {message}{colors.ENDC}', *args, **kwargs)


class KxhArgumentParser(argparse.ArgumentParser):
    _USAGE = """
    kxh [-h | --help]
        [+d | ++dry] [+v | ++verbose] [+D | ++debug]
        [+F | ++force-reinstall] [+S | ++sync-only] [+f | ++fast]
        [(+N | ++name) NAME] [(+r | ++rc) RC]
        [(+h | ++hermetic) | (+s | ++semi-hermetic) | (+n | ++non-hermetic)]
        [-46AaCfGgKkMNnqsTtVvXxYy] [-B bind_interface] [-b bind_address]
        [-c cipher_spec] [-D [bind_address:]port] [-E log_file]
        [-e escape_char] [-F configfile] [-I pkcs11] [-i identity_file]
        [-J destination] [-L address] [-l login_name] [-m mac_spec]
        [-O ctl_cmd] [-o option] [-P tag] [-p port] [-Q query_option]
        [-R address] [-S ctl_path] [-W host:port] [-w local_tun[:remote_tun]]
        [destination[:port]] [-- command [argument ...]]

Options:
    +v, ++verbose: verbose mode.
    +d, ++dry: dry run.
    +D, ++debug: debug mode.
    +F, ++force-reinstall: force reinstall on remote host.
    +S, ++sync-only: sync files only.
    +f, ++fast: skip file sync.
    (+r | ++rc) RC: use custom RC file.
    (+N | ++name) NAME: use custom name instead of "kxh".
    +h, ++hermetic: use hermetic mode (default).
    +s, ++semi-hermetic: use semi-hermetic mode.
    +n, ++non-hermetic: use non-hermetic mode.
"""

    def __init__(self):
        super().__init__()
        store_true = {'action': 'store_true'}
        self.kxh_options = {
            ('d', 'dry'): store_true,
            ('v', 'verbose'): store_true,
            ('D', 'debug'): store_true,
            ('F', 'force-reinstall'): store_true,
            ('S', 'sync-only'): store_true,
            ('f', 'fast'): store_true,
            ('h', 'hermetic'): store_true,
            ('s', 'semi-hermetic'): store_true,
            ('n', 'non-hermetic'): store_true,
            ('N', 'name'): {'type': str, 'default': None},
            ('r', 'rc'): {'type': str, 'default': None},
        }
        for options, kwargs in self.kxh_options.items():
            dest = f"kxh_{options[-1].replace('-', '_')}"
            options = [f'--kxh-{o}' for o in options]
            self.add_argument(*options, dest=dest, **kwargs)
        for option in '46AaCfGgKkMNnqsTtVvXxYy':
            self.add_argument(f'-{option}', action='store_true')
        for option in 'BbcDEeFIiJLlmOoPpQRSWw':
            self.add_argument(f'-{option}', dest=option)
        self.add_argument('destination', type=str)

    def parse_args(self, args=None, namespace=None):
        args = args or sys.argv[1:]
        if '-h' in args or '--help' in args:
            self.print_usage()
            exit(0)
        normalized_args = []
        command_args = []
        parse_command = False
        for a in args:
            if parse_command:
                command_args.append(a)
                continue
            if a.startswith('++'):
                a = a.replace('-', '_')
                normalized_args.append(f'--kxh-{a.lstrip("+")}')
            elif a.startswith('+'):
                a = a.replace('-', '_')
                for af in a.lstrip('+'):
                    normalized_args.append(f'--kxh-{af}')
            elif a == '--':
                parse_command = True
            else:
                normalized_args.append(a)
        ssh_args = super().parse_args(normalized_args, namespace)
        ssh_args.command = command_args
        kxh_args = argparse.Namespace()
        for k, v in dict(vars(ssh_args)).items():
            if k.startswith('kxh_'):
                setattr(kxh_args, k[4:], v)
                delattr(ssh_args, k)
        mode = 'hermetic'
        if kxh_args.semi_hermetic:
            mode = 'semi-hermetic'
        if kxh_args.non_hermetic:
            mode = 'non-hermetic'
        kxh_args.mode = mode
        del kxh_args.hermetic  # type: ignore
        del kxh_args.semi_hermetic  # type: ignore
        del kxh_args.non_hermetic  # type: ignore
        if kxh_args.debug:
            kxh_args.verbose = True
        # FIXME a temporary hack to handle localhost connection
        kxh_args.bootstrap = (
            ssh_args.destination == 'localhost' and ssh_args.p in (None, ))
        if ':' in ssh_args.destination:
            dest, port = ssh_args.destination.split(':')
            ssh_args.destination = dest
            ssh_args.p = port
        return kxh_args, ssh_args

    def unparse_ssh_args(self, parsed_args, ssh_command=None, dest=True):
        if not isinstance(parsed_args, dict):
            parsed_args = vars(parsed_args)
        if ssh_command is None:
            ssh_command = shutil.which('ssh')
        command_line = [ssh_command]
        for option in '46AaCfGgKkMNnqsTtVvXxYy':
            if parsed_args.get(option):
                command_line.append(f'-{option}')
        for option in 'BbcDEeFIiJLlmOoPpQRSWw':
            value = parsed_args.get(option)
            if value is not None:
                command_line.append(f'-{option}')
                command_line.append(str(value))
        if dest:
            command_line.append(parsed_args['destination'])
        return command_line

    def print_usage(self, file=None):
        print_message('info', f'Usage:\n{self._USAGE}')

    def error(self, message):
        self.print_usage()
        print_message('error', message.replace('--kxh-', '+'))
        exit(1)


def update(mapping, values):
    for k, v in values.items():
        if v is None:
            pass
        elif isinstance(v, bool):
            mapping[k] = mapping.get(k) or v
        else:
            mapping[k] = v


class KXH:
    kxh_defaults = {
        'name': 'kxh',
        'repo': 'https://github.com/admk/dotfiles.git',
        'ssh_command': shutil.which('ssh'),
        'rsh_command': shutil.which('ssh'),
    }

    def _load_rc(self, config_home, rc):
        rc = rc or os.path.join(config_home, 'kxh', 'config.toml')
        if os.path.exists(rc):
            with open(rc, 'rb') as f:
                config = tomlkit.load(f).unwrap()
        else:
            config = {}
        config.setdefault('kxh', {})
        for k, v in self.kxh_defaults.items():
            config['kxh'].setdefault(k, v)
        if 'key' not in config['kxh']:
            config['kxh']['key'] = Fernet.generate_key().decode('utf-8')
        config.setdefault('ssh', {})
        return config

    def __init__(self):
        super().__init__()
        parser = KxhArgumentParser()
        kxh_args, ssh_args = parser.parse_args()
        config_home = os.environ.get('XDG_CONFIG_HOME', '~/.config')
        cache_home = os.environ.get('XDG_CACHE_HOME', '~/.cache')
        config = self._load_rc(config_home, kxh_args.rc)
        update(config.setdefault('kxh', {}), vars(kxh_args))
        ssh_args = {
            k: v for k, v in vars(ssh_args).items() if v is not False}
        update(config.setdefault('ssh', {}), ssh_args)
        self.ssh_cmd = parser.unparse_ssh_args(
            config['ssh'], ssh_command=config['kxh']['ssh_command'], dest=False)
        home = os.environ.get('KXH_HOME', None)
        if not home:
            name = config['kxh']['name']
            home = os.path.join(os.environ['HOME'], f'.{name}')
        config['kxh'].setdefault('home', home)
        if config['kxh']['verbose']:
            src = tomlkit.dumps(config)
            hl_src = highlight(src, 'toml')
            hl_src = add_border(None, None, src, hl_src)
            print_message('verbose', 'KXH Config:')
            print(hl_src)
        name = config['kxh']['name']
        if ' ' in name:
            print_message('error', 'KXH name cannot contain spaces.')
            exit(1)
        self.config = config
        self.config_home = os.path.join(config_home, name)
        self.cache_home = os.path.join(cache_home, name)

    def _run(self, command, error_message=None, verbose=None, debug=None, **kwargs):
        verbose = verbose if verbose is not None else self.config['kxh']['verbose']
        debug = debug if debug is not None else self.config['kxh']['debug']
        dry = self.config['kxh']['dry']
        if debug or dry:
            print_message('debug', f"run: {' '.join(command)}")
            err = sys.stderr
        else:
            err = subprocess.DEVNULL
        if dry:
            return
        try:
            output = subprocess.check_output(command, stderr=err, **kwargs)
        except subprocess.CalledProcessError as e:
            if error_message is not None:
                print_message('error', f'{error_message}')
                exit(1)
            else:
                raise e
        output = output.decode('utf-8')
        if debug:
            print_message('debug', f'Output: {output}')
        return output

    def _run_shell(
        self, command, error_message=None, verbose=None, debug=None, **kwargs
    ):
        verbose = verbose if verbose is not None else self.config['kxh']['verbose']
        debug = debug if debug is not None else self.config['kxh']['debug']
        dry = self.config['kxh']['dry']
        if verbose or dry:
            print_message('verbose', f'run_shell: {command}')
        if not debug:
            kwargs.setdefault('stdout', subprocess.DEVNULL)
        if dry:
            return
        try:
            p = subprocess.run(command, shell=True, **kwargs)
        except subprocess.CalledProcessError as e:
            if error_message is not None:
                print_message('error', f'{error_message}')
                exit(1)
            else:
                raise e
        return p.returncode

    def _ssh_host_specific_rcs(self):
        key = self.config['kxh']['key']
        rcs_dir = os.path.join(self.config_home, 'hosts')
        os.makedirs(rcs_dir, exist_ok=True)
        custom_rcs = []
        for rc in os.listdir(rcs_dir):
            rc_file = os.path.join(rcs_dir, rc)
            if not os.path.isfile(rc_file):
                continue
            rc_name = os.path.splitext(rc)[0]
            if re.match(rc_name, self.config['ssh']['destination']):
                custom_rcs.append(rc_file)
        rcs = []
        for rc in custom_rcs:
            with open(rc, 'r', encoding='utf-8') as r:
                rc = os.path.relpath(rc, self.config_home)
                rcs.append(f'# --- {rc} ---')
                rcs.append(r.read())
        rcs = '\n'.join(rcs)
        enc = Fernet(key).encrypt(rcs.encode('utf-8'))
        collate_rc = os.path.join(self.cache_home, 'hosts_collated.xsh.enc')
        with open(collate_rc, 'w', encoding='utf-8') as f:
            f.write(enc.decode('utf-8'))
        key_file = os.path.join(self.cache_home, 'key')
        with open(key_file, 'w', encoding='utf-8') as f:
            f.write(key)
        return [collate_rc, key_file]

    def _rsync(self, source, destination, file_list=None, sync_file=None):
        is_remote = ':' in destination
        rsync_cmd = [
            f"SHELL={shutil.which('bash')}",
            "rsync --archive --no-owner --no-group --compress --human-readable",
            "--update --delete --partial --progress --checksum --copy-links"
        ]
        if is_remote:
            ssh = self.config['kxh']['rsh_command']
            rsync_cmd.append(f"--rsh {' '.join([ssh] + self.ssh_cmd[1:])!r}")
        file_list_file = None
        if file_list is not None:
            if sync_file is not None:
                file_list_file = open(sync_file, 'w', encoding='utf-8')
                home = self.config['kxh']['home']
                rel_sync_file = os.path.relpath(sync_file, home)
                file_list.append(rel_sync_file)
            else:
                file_list_file = tempfile.NamedTemporaryFile(
                    'w', encoding='utf-8', delete=True)
            file_list_file.write('\n'.join(file_list) + '\n')
            file_list_file.flush()
            rsync_cmd.append(f"--files-from {file_list_file.name}")
        source = shlex.quote(source)
        destination = shlex.quote(destination)
        rsync_cmd.append(f"{source} {destination}")
        self._run_shell(
            ' '.join(rsync_cmd),
            f'Failed to rsync files from {source!r} to {destination!r}.')
        if file_list_file is not None:
            file_list_file.close()

    def _shared_files(self):
        name = self.config['kxh']['name']
        shared_dir = os.path.join(self.config_home, 'share')
        shared_pat = os.path.join(shared_dir, '**', '**')
        shared_files = glob.glob(
            shared_pat, recursive=True, include_hidden=True)
        # omit directories
        shared_files = [f for f in shared_files if os.path.isfile(f)]
        shared_files = [
            os.path.relpath(f, shared_dir) for f in shared_files]
        shared_files = list(sorted(set(shared_files)))
        cached_shared_dir = os.path.join(self.cache_home, 'share')
        self._rsync(shared_dir, cached_shared_dir, shared_files)
        return [os.path.join(self.cache_home, 'share', f) for f in shared_files]

    def _file_list_file(self):
        home = self.config['kxh']['home']
        file_list = self._run(
            ['git', 'ls-files'],
            f'Failed to list files in {home!r}.',
            verbose=False, cwd=home)
        file_list = file_list.strip().split('\n') if file_list else []
        custom_files = self._ssh_host_specific_rcs()
        custom_files += self._shared_files()
        files = [
            os.path.relpath(f, self.config['kxh']['home'])
            for f in custom_files]
        if self.config['kxh']['debug']:
            vcf = '\n  ' + '\n  '.join(files)
            print_message('debug', f"Custom files: {vcf}")
        file_list += files
        missing_files = [
            f for f in files if not os.path.exists(os.path.join(home, f))]
        if missing_files:
            print_message('warning', f'Missing files: {missing_files!r}')
        return file_list

    def _sync_files(self):
        url = self.config['kxh']['repo']
        home = self.config['kxh']['home']
        name = self.config['kxh']['name']
        dest = self.config['ssh']['destination']
        if not os.path.exists(home):
            self._run(
                ['git', 'clone', url, home],
                f'Failed to clone {url!r} to {home!r}.')
        git_repo = os.path.join(home, '.git')
        if not os.path.exists(git_repo):
            print_message('error', 'kxh recursively is not yet supported.')
            exit(1)
        if self.config['kxh']['force_reinstall']:
            dest = self.config['ssh']['destination']
            ask = f'Force reinstall .{name} to {dest!r}?'
            ask = f'{colors.WARNING}{colors.BOLD}{ask}{colors.ENDC} [y/N] '
            if input(ask) != 'y':
                exit(0)
            print_message('warning', f'Reinstalling {name}...')
            rm_cmd = f'rm -rf .{name} .local/bin/xh'
            self._run(
                self.ssh_cmd + [dest, rm_cmd],
                f'Failed to remove .{name!r} from {dest!r}.')
        file_list = self._file_list_file()
        if self.config['kxh']['bootstrap']:
            print_message('verbose', 'Bootstrapping...')
            return
        sync_file = os.path.join(self.cache_home, 'sync')
        self._rsync(home, f'{dest}:.{name}', file_list, sync_file)

    def _ssh(self):
        name = self.config['kxh']['name']
        mode = self.config['kxh']['mode']
        verbose = self.config['kxh']['verbose']
        debug = self.config['kxh']['debug']
        fast = self.config['kxh']['fast']
        env = self.config['kxh'].get('env', {})
        env = [f'{k}={v}' for k, v in env.items()]
        dest = self.config['ssh']['destination']
        port = self.config['ssh'].get('p')
        host = f'{dest}:{port}' if port else dest
        prefix = [
            f'KXH_HOST={host}',
            f'KXH_NAME={name}',
            f'KXH_MODE={mode}',
            f'KXH_VERBOSE={int(verbose)}',
            f'KXH_DEBUG={int(debug)}',
            f'KXH_FAST={int(fast)}',
        ] + env
        init_script = f"env {' '.join(prefix)} "
        command = f'.{name}/.local/bin/_kxh_init'
        if non_interactive_command := self.config['ssh']['command']:
            non_interactive_command = " ".join(non_interactive_command)
            command += f' -c {non_interactive_command!r}'
        init_script += f"/bin/bash --norc -c {quote(command)!r}"
        ssh_cmd = self.ssh_cmd + ['-o', 'RequestTTY=yes', dest, init_script]
        if non_interactive_command:
            rsh_cmd = self.config['kxh']['rsh_command']
            ssh_cmd = [rsh_cmd] + ssh_cmd[1:]
        self._run_shell(
            ' '.join(ssh_cmd), 'Failed to load ssh session.',
            stdout=sys.stdout, stderr=sys.stderr)
        # if not cmd and rv == 255:
        #     self._run_shell('reset', 'Failed to reset terminal.')

    def main(self):
        verbose = self.config['kxh']['verbose']
        if not self.config['kxh']['fast']:
            if verbose:
                print_message('verbose', 'Syncing files...')
            self._sync_files()
        if self.config['kxh']['sync_only']:
            if verbose:
                print_message('verbose', 'Sync done.')
            return
        if verbose:
            print_message('verbose', 'Connecting to remote host...')
        self._ssh()


if __name__ == '__main__':
    KXH().main()
