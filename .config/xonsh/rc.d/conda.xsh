from xonsh.tools import unthreadable as _unthreadable


@aliases.register('conda')
@_unthreadable
def _conda_lazy(args):
    import os
    import sys
    from types import ModuleType
    from shutil import which
    conda_path = which("conda")
    if not conda_path and ${...}.get('KXH_CONDA_PREFIX'):
        conda_path = os.path.join($KXH_CONDA_PREFIX, 'condabin', 'conda')
    if not conda_path:
        print('kxh: conda: command not found', file=sys.stderr)
        return
    if ${...}.get('KXH_VERBOSE') == '1':
        print(f'kxh: conda: using {conda_path!r}')
    del aliases['conda']
    mod = ModuleType('xontrib.conda', f'Autogenerated from {_conda_lazy}.')
    script = $(@(conda_path) "shell.xonsh" "hook")
    script = script.replace('conda activate base', f'{conda_path} activate base 2> /dev/null')
    __xonsh__.execer.exec(
        script, glbs=mod.__dict__,
        filename=f"$({conda_path} shell.xonsh hook)")
    sys.modules["xontrib.conda"] = mod
    from xonsh.tools import unthreadable
    aliases['conda'] = unthreadable(aliases['conda'])
    mod._conda_main(args)


del _unthreadable
