from xonsh.tools import unthreadable as _unthreadable


@aliases.register('conda')
@_unthreadable
def _conda_lazy(args):
    import os
    import sys
    from types import ModuleType
    from shutil import which
    conda_path = which("conda")
    if not conda_path and ${...}.get('KXH_CONDA_PREFIX'):
        conda_path = os.path.join($KXH_CONDA_PREFIX, 'condabin', 'conda')
    if not conda_path:
        print('kxh shell ==> conda: command not found', file=sys.stderr)
        return
    if ${...}.get('KXH_DEBUG') == '1':
        print(f'kxh shell ==> conda: using {conda_path!r}')
    del aliases['conda']
    mod = ModuleType('xontrib.conda', f'Autogenerated from {_conda_lazy}.')
    script = $(@(conda_path) "shell.xonsh" "hook")
    script = script.replace('conda activate base', f'{conda_path} activate base 2> /dev/null')
    __xonsh__.execer.exec(
        script, glbs=mod.__dict__,
        filename=f"$({conda_path} shell.xonsh hook)")
    sys.modules["xontrib.conda"] = mod
    aliases['conda'] = _unthreadable(aliases['conda'])
    mod._conda_main(args)


def conda_install_if_missing(names):
    missings = [
        name for name in names
        if not pf'{$KXH_CONDA_PREFIX}/bin/{name}'.exists()]
    if not missings:
        return
    missings_str = ",".join(missings)
    print(f'kxh shell ==> conda: {missings_str!r} not found, installing...')
    quite_flag = '-q' if ${...}.get('KXH_VERBOSE') != '1' else ''
    @(f'{$KXH_CONDA_PREFIX}/bin/conda') install \
        @(quite_flag) -y -c conda-forge @(missings)


def _conda_install():
    packages = ['starship']
    conda_install_if_missing(packages)


_conda_install()
del _conda_install
